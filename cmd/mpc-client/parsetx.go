package main

import (
	"encoding/hex"

	"github.com/anyswap/mpc-client/log"
	"github.com/ethereum/go-ethereum/core/types"
)

var knownContractMethods = map[string]string{
	// ======= AnyswapV5ERC20 ===================
	"3644e515": "DOMAIN_SEPARATOR()",
	"30adf81f": "PERMIT_TYPEHASH()",
	"ec126c77": "Swapin(bytes32,address,uint256)",
	"628d6cba": "Swapout(uint256,address)",
	"00bf26f4": "TRANSFER_TYPEHASH()",
	"dd62ed3e": "allowance(address,address)",
	"0d707df8": "applyMinter()",
	"d93f2445": "applyVault()",
	"095ea7b3": "approve(address,uint256)",
	"cae9ca51": "approveAndCall(address,uint256,bytes)",
	"70a08231": "balanceOf(address)",
	"9dc29fac": "burn(address,uint256)",
	"5f9b105d": "changeMPCOwner(address)",
	"60e232a9": "changeVault(address)",
	"313ce567": "decimals()",
	"6a42b8f8": "delay()",
	"a29dff72": "delayDelay()",
	"c3081240": "delayMinter()",
	"87689e28": "delayVault()",
	"d0e30db0": "deposit()",
	"b6b55f25": "deposit(uint256)",
	"6e553f65": "deposit(uint256,address)",
	"bebbf4d0": "depositVault(uint256,address)",
	"81a37c18": "depositWithPermit(address,uint256,uint256,uint8,bytes32,bytes32,address)",
	"f954734e": "depositWithTransferPermit(address,uint256,uint256,uint8,bytes32,bytes32,address)",
	"a045442c": "getAllMinters()",
	"2ebe3fbb": "initVault(address)",
	"aa271e1a": "isMinter(address)",
	"40c10f19": "mint(address,uint256)",
	"8623ec7b": "minters(uint256)",
	"f75c2664": "mpc()",
	"06fdde03": "name()",
	"7ecebe00": "nonces(address)",
	"8da5cb5b": "owner()",
	"4ca8f0ed": "pendingDelay()",
	"91c5df49": "pendingMinter()",
	"52113ba7": "pendingVault()",
	"d505accf": "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
	"cfbd4885": "revokeMinter(address)",
	"fca3b5aa": "setMinter(address)",
	"6817031b": "setVault(address)",
	"c4b740f5": "setVaultOnly(bool)",
	"95d89b41": "symbol()",
	"18160ddd": "totalSupply()",
	"a9059cbb": "transfer(address,uint256)",
	"4000aea0": "transferAndCall(address,uint256,bytes)",
	"23b872dd": "transferFrom(address,address,uint256)",
	"605629d6": "transferWithPermit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
	"6f307dc3": "underlying()",
	"fbfa77cf": "vault()",
	"3ccfd60b": "withdraw()",
	"2e1a7d4d": "withdraw(uint256)",
	"00f714ce": "withdraw(uint256,address)",
	"0039d6ec": "withdrawVault(address,uint256,address)",

	// ======= AnyswapV5Router ===================
	"87cc6e2f": "anySwapFeeTo(address,uint256)",
	"825bb13c": "anySwapIn(bytes32,address,address,uint256,uint256)",
	"25121b76": "anySwapIn(bytes32[],address[],address[],uint256[],uint256[])",
	"0175b1c4": "anySwapInAuto(bytes32,address,address,uint256,uint256)",
	"52a397d5": "anySwapInExactTokensForNative(bytes32,uint256,uint256,address[],address,uint256,uint256)",
	"2fc1e728": "anySwapInExactTokensForTokens(bytes32,uint256,uint256,address[],address,uint256,uint256)",
	"3f88de89": "anySwapInUnderlying(bytes32,address,address,uint256,uint256)",
	"241dc2df": "anySwapOut(address,address,uint256,uint256)",
	"dcfb77b1": "anySwapOut(address[],address[],uint256[],uint256[])",
	"65782f56": "anySwapOutExactTokensForNative(uint256,uint256,address[],address,uint256,uint256)",
	"6a453972": "anySwapOutExactTokensForNativeUnderlying(uint256,uint256,address[],address,uint256,uint256)",
	"4d93bb94": "anySwapOutExactTokensForNativeUnderlyingWithPermit(address,uint256,uint256,address[],address,uint256,uint8,bytes32,bytes32,uint256)",
	"c8e174f6": "anySwapOutExactTokensForNativeUnderlyingWithTransferPermit(address,uint256,uint256,address[],address,uint256,uint8,bytes32,bytes32,uint256)",
	"0bb57203": "anySwapOutExactTokensForTokens(uint256,uint256,address[],address,uint256,uint256)",
	"d8b9f610": "anySwapOutExactTokensForTokensUnderlying(uint256,uint256,address[],address,uint256,uint256)",
	"99cd84b5": "anySwapOutExactTokensForTokensUnderlyingWithPermit(address,uint256,uint256,address[],address,uint256,uint8,bytes32,bytes32,uint256)",
	"9aa1ac61": "anySwapOutExactTokensForTokensUnderlyingWithTransferPermit(address,uint256,uint256,address[],address,uint256,uint8,bytes32,bytes32,uint256)",
	"a5e56571": "anySwapOutNative(address,address,uint256)",
	"edbdf5e2": "anySwapOutUnderlying(address,address,uint256,uint256)",
	"8d7d3eea": "anySwapOutUnderlyingWithPermit(address,address,address,uint256,uint256,uint8,bytes32,bytes32,uint256)",
	"1b91a934": "anySwapOutUnderlyingWithTransferPermit(address,address,address,uint256,uint256,uint8,bytes32,bytes32,uint256)",
	"99a2f2d7": "cID()",
	"5b7b018c": "changeMPC(address)",
	"456862aa": "changeVault(address,address)",
	"701bb891": "depositNative(address,address)",
	"c45a0155": "factory()",
	"85f8c259": "getAmountIn(uint256,uint256,uint256)",
	"054d50d4": "getAmountOut(uint256,uint256,uint256)",
	"1f00ca74": "getAmountsIn(uint256,address[])",
	"d06ca61f": "getAmountsOut(uint256,address[])",
	"ad615dec": "quote(uint256,uint256,uint256)",
	"8fd903f5": "wNATIVE()",
	"832e9492": "withdrawNative(address,uint256,address)",

	// ======= AnyCallProxy ===================
	"32f29022": "anyCall(address,address[],bytes[],address[],uint256[],uint256)",
	"5a11d475": "anyCall(address[],bytes[],address[],uint256[],uint256)",
	"b63b38d0": "applyMPC()",
	"160f1053": "delayMPC()",
	"d6b0f484": "disableWhitelist()",
	"cdfb2b4e": "enableWhitelist()",
	"b510c235": "encode(string,bytes)",
	"ce82a36f": "encodePermit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
	"99c1bc92": "encodeTransferFrom(address,address,uint256)",
	"09fd8212": "isInWhitelist(address)",
	"f830e7b4": "pendingMPC()",
	"f59c3708": "whitelist(address,bool)",
	"51fb012d": "whitelistEnabled()",

	// ======== AnycallV7 =============
	"ab41d324": "FLAG_ALLOW_FALLBACK()",
	"3083d598": "FLAG_MERGE_CONFIG_FLAGS()",
	"34d47cec": "FLAG_PAY_FEE_ON_DEST()",
	"f851a440": "admin()",
	"1979a284": "anyCall(address,bytes,uint256,uint256,bytes)",
	"b7f308dd": "anyCall(string,bytes,uint256,uint256,bytes)",
	"d7328bad": "anyExec(address,bytes,string,(bytes32,address,uint256,uint256,uint256),bytes)",
	"54b09ac5": "calcUniqID(bytes32,address,uint256,uint256)",
	"79502c55": "config()",
	"dfde3fdb": "execCompleted(bytes32)",
	"c34c08e5": "executor()",
	"f8c8765e": "initialize(address,address,address,address)",
	"5c975abb": "paused()",
	"a21ca48e": "retryExec(bytes32,address,uint256,uint256,address,bytes)",
	"22b6a4e1": "retryExecRecords(bytes32)",
	"5a7aacd7": "retryWithPermit()",
	"704b6c02": "setAdmin(address)",
	"20e3dbd4": "setConfig(address)",
	"1c3c0ea8": "setExecutor(address)",
	"16c38b3c": "setPaused(bool)",
	"37da9f24": "setRetryWithPermit(bool)",

	// ====== AnycallV7Config ===========
	"70480275": "addAdmin(address)",
	"c3294bb5": "APPMODE_USE_CUSTOM_SRC_FEES()",
	"c0ab8899": "FREE_MODE()",
	"95ec1be8": "PERMISSIONLESS_MODE()",
	"682c2058": "accruedFees()",
	"14bfd6d0": "admins(uint256)",
	"9a2e15e5": "anycallContract()",
	"006a5fa1": "appBlacklist(string)",
	"304281cb": "appConfig(string)",
	"6c0cf7b7": "appCustomModes(string,uint256)",
	"732a8eda": "appDefaultModes(string)",
	"a86529d8": "appExecWhitelist(string,address)",
	"b0417587": "appIdentifier(address)",
	"ab818db7": "calcSrcFees(address,uint256,uint256)",
	"66c96b37": "calcSrcFees(string,uint256,uint256)",
	"65f84d5b": "chargeFeeOnDestChain(address,uint256)",
	"f0475a92": "checkCall(address,bytes,uint256,uint256)",
	"c9c8d399": "checkExec(string,address,address)",
	"f340fa01": "deposit(address)",
	"74bdda60": "executionBudget(address)",
	"e9523c97": "getAllAdmins()",
	"c5a1aaa9": "initAnycallContract(address)",
	"2687b2b1": "initAppConfig(string,address,address,uint256,address[])",
	"24d7806c": "isAdmin(address)",
	"b854bb56": "isUseCustomSrcFees(string,uint256)",
	"5689f039": "minReserveBudget()",
	"295a5212": "mode()",
	"e0a73a93": "premium()",
	"1785f53c": "removeAdmin(address)",
	"9a295d49": "setAppModes(address,uint256,uint256[],uint256[])",
	"7a67bbf9": "setBlacklists(string[],bool)",
	"afdd2aed": "setCustomSrcFees(address,uint256[],uint256[],uint256[])",
	"89168e18": "setDefaultSrcFees(uint256[],uint256[],uint256[])",
	"2898bff8": "setMinReserveBudget(uint128)",
	"d72dd3b4": "setMode(uint256)",
	"439b3e1c": "setPremium(uint128)",
	"e89006a3": "setWhitelists(address,address[],bool)",
	"908c07c5": "srcCustomFees(string,uint256)",
	"5ffdc9ca": "srcDefaultFees(uint256)",
	"b781bfaa": "updateAppConfig(address,address,uint256)",
	"667cb4b7": "upgradeApp(address,address)",
	"ada82c7d": "withdrawAccruedFees()",

	// ===== MuntilchainV7Router ======
	"5598f119": "Call_Paused_ROLE()",
	"e94b7144": "Exec_Paused_ROLE()",
	"9ac25d08": "PAUSE_ALL_ROLE()",
	"912d857c": "Retry_Paused_ROLE()",
	"f91275b5": "Swapin_Paused_ROLE()",
	"0c55b22e": "Swapout_Paused_ROLE()",
	"e2ea2ba9": "addAnycallProxies(address[],bool[])",
	"8fef8489": "anySwapIn(string,(bytes32,address,address,uint256,uint256))",
	"f9ca3a5d": "anySwapInAndExec(string,(bytes32,address,address,uint256,uint256),address,bytes)",
	"81aa7a81": "anySwapInAuto(string,(bytes32,address,address,uint256,uint256))",
	"5de26385": "anySwapInNative(string,(bytes32,address,address,uint256,uint256))",
	"9ff1d3e8": "anySwapInUnderlying(string,(bytes32,address,address,uint256,uint256))",
	"cc95060a": "anySwapInUnderlyingAndExec(string,(bytes32,address,address,uint256,uint256),address,bytes)",
	"c604b0b8": "anySwapOut(address,string,uint256,uint256)",
	"6b4b4376": "anySwapOutAndCall(address,string,uint256,uint256,string,bytes)",
	"540dd52c": "anySwapOutNative(address,string,uint256)",
	"ea0c968b": "anySwapOutNativeAndCall(address,string,uint256,string,bytes)",
	"049b4e7e": "anySwapOutUnderlying(address,string,uint256,uint256)",
	"e0e9048e": "anySwapOutUnderlyingAndCall(address,string,uint256,uint256,string,bytes)",
	"d2c7dfcc": "anycallExecutor()",
	"1d5aa281": "anycallProxyInfo(address)",
	"ed56531a": "pause(bytes32)",
	"9e9e4666": "paused(bytes32)",
	"d21c1cf5": "removeAnycallProxies(address[])",
	"6a6459d1": "retryRecords(bytes32)",
	"872acd04": "retrySwapinAndExec(string,(bytes32,address,address,uint256,uint256),address,bytes,bool)",
	"a413387a": "routerSecurity()",
	"a66ec443": "setRouterSecurity(address)",
	"2f4dae9f": "unpause(bytes32)",

	// ======== MultichainV7ROuterSecurity =============
	"8e8934ae": "Pause_Check_SwapID_Completion()",
	"c75f8d9a": "Pause_Check_SwapoutID_Completion()",
	"b434561c": "Pause_Register_Swapin()",
	"a5f42f9d": "Pause_Register_Swapout()",
	"580e70d5": "addSupportedCaller(address)",
	"6c4c50d2": "completedSwapin(string)",
	"7d837d32": "completedSwapoutID(bytes32,uint256)",
	"c36cec9c": "currentSwapoutNonce()",
	"d726d061": "getAllSupportedCallers()",
	"975e95bb": "isSupportedCaller(address)",
	"47b1d650": "isSwapCompleted(string,bytes32,uint256)",
	"be6adb87": "isSwapoutIDExist(bytes32)",
	"b1f05c57": "registerSwapin(string,(bytes32,address,address,uint256,uint256))",
	"f1c58fa0": "registerSwapout(address,address,string,uint256,uint256,string,bytes)",
	"08cb277f": "removeSupportedCaller(address)",
	"bce39350": "supportedCallers(uint256)",
	"4fda04ca": "swapoutNonce(bytes32)",

	// ======= AnycallExecutor ======
	"36aabfd2": "addAuthCallers(address[])",
	"5b5120f7": "execute(address,address,address,uint256,bytes)",
	"f1c4132e": "getAdminAtIndex(uint256)",
	"e8041522": "getAdminsCount()",
	"b1fb90c4": "getAllAuthCallers()",
	"fae9577f": "getAuthCallerAtIndex(uint256)",
	"e81ba198": "getAuthCallersCount()",
	"f6601e1a": "isAuthCaller(address)",
	"8f4df2dd": "removeAuthCallers(address[])",

	// ===== ProxyAdmin =======
	"26782247": "pendingAdmin()",
	"4e67428d": "applyAdmin()",
	"8f283970": "changeAdmin(address)",

	// ====== TransparentUpgradeableProxy ========
	"5c60da1b": "implementation()",
	"3659cfe6": "upgradeTo(address)",
	"4f1ef286": "upgradeToAndCall(address,bytes)",

	// ====== Multicall ======
	"252dba42": "aggregate((address,bytes)[])",
	"82ad56cb": "aggregate3((address,bool,bytes)[])",
	"174dea71": "aggregate3Value((address,bool,uint256,bytes)[])",
	"c3077fa9": "blockAndAggregate((address,bytes)[])",
	"bce38bd7": "tryAggregate(bool,(address,bytes)[])",
	"399542e9": "tryBlockAndAggregate(bool,(address,bytes)[])",
}

func parseEthTx(tx *types.Transaction) {
	to := tx.To()
	if to == nil {
		log.Println("the tx is creating contract.")
	}
	txData := tx.Data()
	if len(txData) < 4 {
		log.Println("the tx is not calling contract.")
	} else if method, exist := knownContractMethods[hex.EncodeToString(txData[:4])]; exist {
		log.Printf("the tx is calling method => %v", method)
	}

}
